#!/bin/bash
# usage: reduce-file input.rs <opt-cores> <opt-extra-args>
# produces: input.rs.perses input.rs.creduce input.rs.rustreduce input.rs.rustandcreduce
# 

# needs: a comment // build: <rust-version>
# needs: a comment // error: <error-to-grep for>
# takes: a comment // target: <target> 
INPUT="$1"
CORES="$2"
EXTRA_PERSES_FLAGS="$3"
RUSTUP="${HOME}/.cargo/bin/rustup"

# Paths to various scripts
CREDUCE=${CREDUCE:-$HOME/Development/perses-experiment/bins/creduce/creduce/creduce}
RREDUCE=${RREDUCE:-$HOME/Development/perses-experiment/bins/rust-reduce/target/debug/rust-reduce}
PREDUCE=${PREDUCE:-$HOME/Development/perses/bazel-bin/src/org/perses/perses_deploy.jar}
COUNT=${COUNT:-$HOME/Development/perses/bazel-bin/src/org/perses/token_counter_deploy.jar}

WORKDIR=$(mktemp -d -t perses-experiment-XXXXXX)
COUNTDIR=${WORKDIR}/countdir

clear_countdir() {
  rm -rf ${COUNTDIR}
  mkdir -p ${COUNTDIR}
}

# Copy the script into the working directory.
cp ${INPUT} ${WORKDIR}
FILENAME=`basename "${INPUT}"`
BASE="${INPUT%.*}"
cp ${INPUT} ${WORKDIR}/orig-${FILENAME}
INPUT=`basename "${INPUT}"`

echo ${BASE}.sh
[ -f ${BASE}.sh ] && echo " found"
echo ${BASE}.setup.sh
[ -f ${BASE}.setup.sh ] && echo " found"


# Test if $BASE.sh, $BASE.setup.sh exist; if they do, run $BASE.setup.sh and use $BASE.sh as the reduction script
if [ -f ${BASE}.sh ] && [ -f ${BASE}.setup.sh ]; then 
  bash ${BASE}.setup.sh
 
  # Generate the test script.
  cat >${WORKDIR}/reduce-helper.sh <<EOF
#!/bin/bash

touch ${COUNTDIR}/\$\$.\$(date +%s)
INPUT=\${1:-${INPUT}}
if ! ( rustup run nightly rustc -Z parse-only ${INPUT} ); then
  exit 1
fi

EOF
  cat >>${WORKDIR}/reduce-helper.sh ${BASE}.sh

  
  cat >${WORKDIR}/creduce-helper.sh <<EOF
#!/bin/bash

touch ${COUNTDIR}/\$\$.\$(date +%s)
INPUT=\${1:-rust-reduce-${INPUT}}
if ! ( rustup run nightly rustc -Z parse-only ${INPUT} ); then
  exit 1
fi
EOF
  cat >>${WORKDIR}/creduce-helper.sh ${BASE}.sh
  cd ${WORKDIR}
else
  cd ${WORKDIR}
  RUST_VERSION=""
  ERROR=""
  TARGET=""
  EXTRA=""

  while IFS= read -r line
  do
    MATCH=`expr match "$line" "^//[ ]*build:[ ]*\(.*\)"`
    if [ "$?" -eq 0 ]; then
      RUST_VERSION=$MATCH
      continue 
    fi

    MATCH=`expr match "$line" "^//[ ]*target:[ ]*\(.*\)"`
    if [ "$?" -eq 0 ]; then
      TARGET=$MATCH
      continue
    fi

    MATCH=`expr match "$line" "^//[ ]*error:[ ]*\(.*\)"`
    if [ "$?" -eq 0 ]; then
      ERROR=$MATCH
      continue
    fi
    
    MATCH=`expr match "$line" "^//[ ]*extra:[ ]*\(.*\)"`
    if [ "$?" -eq 0 ]; then
      EXTRA=$MATCH
      continue
    fi

    break
  done < "$INPUT"

  # Install the toolchain
  echo "Using Rust ${RUST_VERSION}; optional target: ${TARGET}"
  ${RUSTUP} toolchain install --force ${RUST_VERSION}

  CMDLINE="${RUSTUP} run ${RUST_VERSION} rustc"
  if [ -n "${TARGET}" ]; then
    ${RUSTUP} target add --toolchain ${RUST_VERSION} ${TARGET}
    CMDLINE="${CMDLINE} --target=${TARGET}"
  fi
  CMDLINE="${CMDLINE} ${EXTRA}"


  # Generate the test script.
  cat >reduce-helper.sh <<EOF
#!/bin/bash

touch ${COUNTDIR}/\$\$.\$(date +%s)
INPUT=\${1:-${INPUT}}

if ! ( rustup run nightly rustc -Z parse-only ${INPUT} ); then
  exit 1
fi


RESULT=\`${CMDLINE} \${INPUT} 2>&1\`
if [ "\$?" -eq 0 ]; then
  exit 1
fi

if (echo \$RESULT | grep "${ERROR}"); then
  exit 0
fi

exit 1
EOF
  cat >creduce-helper.sh <<EOF
#!/bin/bash

touch ${COUNTDIR}/\$\$.\$(date +%s)
INPUT=\${1:-rust-reduce-${INPUT}}

if ! ( rustup run nightly rustc -Z parse-only ${INPUT} ); then
  exit 1
fi


RESULT=\`${CMDLINE} \${INPUT} 2>&1\`
if [ "\$?" -eq 0 ]; then
  exit 1
fi

if (echo \$RESULT | grep "${ERROR}"); then
  exit 0
fi

exit 1
EOF
fi
# Mark scripts +x
chmod +x reduce-helper.sh
chmod +x creduce-helper.sh

PERSES_FLAGS=""
CREDUCE_FLAGS=""

if [ "${CORES}" != "" ]; then
  PERSES_FLAGS="--threads ${CORES}"
  CREDUCE_FLAGS="--n ${CORES}"
fi

# Run Perses, Rust-Reduce, Rust+CReduce on target
# TODO: save timings
START=$SECONDS
clear_countdir 
java -jar ${PREDUCE} --test-script reduce-helper.sh --input-file ${INPUT} --output-file ${INPUT}.perses ${EXTRA_PERSES_FLAGS} ${PERSES_FLAGS}
CPERSES=$(ls ${COUNTDIR} | wc -l)
TPERSES=$((SECONDS - START))
clear_countdir
START=$SECONDS
${RREDUCE} -o rust-reduce-${INPUT} ./reduce-helper.sh ${INPUT}
if ! [ -f rust-reduce-${INPUT} ]; then
  cp ${INPUT} rust-reduce-${INPUT} ## No change, copy
fi
TRREDUCE=$((SECONDS - START))
CRREDUCE=$(ls ${COUNTDIR} | wc -l)
# Save Rust-Reduce's output before we feed it into CReduce
rustup run stable rustfmt --quiet --emit stdout rust-reduce-${INPUT} > rreduce-reduced-${INPUT}
${CREDUCE} ${CREDUCE_FLAGS} ./creduce-helper.sh rust-reduce-${INPUT} 
TCRREDUCE=$((SECONDS - START))
CCRREDUCE=$(ls ${COUNTDIR} | wc -l)
# Run CReduce on the original file to get timing
clear_countdir
START=$SECONDS
${CREDUCE} ./reduce-helper.sh ${INPUT}
TCREDUCE=$((SECONDS - START))
CCREDUCE=$(ls ${COUNTDIR} | wc -l)

# Format the files to get consistent reduction comparisons
rustup run stable rustfmt --quiet --emit stdout ${INPUT}.perses > perses-reduced-${INPUT}

rustup run stable rustfmt --quiet --emit stdout rust-reduce-${INPUT} > crreduce-reduced-${INPUT}
if [ "$?" -ne 0 ]; then
  cp rust-reduce-${INPUT} crreduce-reduced-${INPUT}
  FAIL=" (bad format)"
fi

rustup run stable rustfmt --quiet --emit stdout ${INPUT} > creduce-reduced-${INPUT}
if [ "$?" -ne 0 ]; then
  cp ${INPUT} creduce-reduced-${INPUT}
  FAIL2=" (bad format)"
fi

# Compute sizes
SPERSES=$(java -jar ${COUNT} perses-reduced-${INPUT} | tail -1 | awk '{print $1}')
SRREDUCE=$(java -jar ${COUNT} rreduce-reduced-${INPUT} | tail -1 | awk '{print $1}')
SCRREDUCE=$(java -jar ${COUNT} crreduce-reduced-${INPUT} | tail -1 | awk '{print $1}')
SCREDUCE=$(java -jar ${COUNT} creduce-reduced-${INPUT} | tail -1 | awk '{print $1}')
SORIG=$(java -jar ${COUNT} orig-${INPUT} | tail -1 | awk '{print $1}')

PPERSES=$(echo "$SPERSES*100/$SORIG" | bc -l | xargs printf "%.2f")
PRREDUCE=$(echo "$SRREDUCE*100/$SORIG" | bc -l | xargs printf "%.2f")
PCRREDUCE=$(echo "$SCRREDUCE*100/$SORIG" | bc -l | xargs printf "%.2f")
PCREDUCE=$(echo "$SCREDUCE*100/$SORIG" | bc -l | xargs printf "%.2f")

# Report times + %-reduction
echo ""
echo "Output folder: $WORKDIR"
echo "Reduction took Perses=${TPERSES}s, Rust-Reduce=${TRREDUCE}s, C-Reduce=${TCREDUCE}s, C-Reduce + Rust-Reduce=${TCRREDUCE}s"
echo "Reduction took Perses=${CPERSES}, Rust-Reduce=${CRREDUCE}, C-Reduce=${CCREDUCE}, C-Reduce + Rust-Reduce=${CCRREDUCE} invocations"
echo "Reduced sizes: Perses=${PPERSES}%, Rust-Reduce=${PRREDUCE}%, C-Reduce=${PCREDUCE}%$FAIL2 C-Reduce + Rust-Reduce=${PCRREDUCE}%$FAIL (of ${SORIG} words)"
echo "Reduced sizes: Perses=${SPERSES}, Rust-Reduce=${SRREDUCE}, C-Reduce=${SCREDUCE}%$FAIL2 C-Reduce + Rust-Reduce=${SCRREDUCE}%$FAIL (of ${SORIG} words)"
